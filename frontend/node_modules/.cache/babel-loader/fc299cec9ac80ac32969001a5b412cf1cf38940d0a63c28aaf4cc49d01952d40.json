{"ast":null,"code":"'use strict';\n\n/**\n * Random crap scrambler.\n */\nconst Wordscramble = function () {};\n\n/**\n * Return a random value up to max.\n *\n * @private\n * @param {number} max - Maximum value.\n * @returns {number} - Random number.\n */\n\nfunction random(max) {\n  return Math.floor(Math.random() * max);\n}\n\n/**\n * Crude variable type detection.\n *\n * TODO: More comprehensive type checking.\n *\n * @private\n * @param {*} victim - Victim to identify.\n * @return {string} - Victim type.\n */\n\nfunction type(victim) {\n  if (Array.isArray(victim)) {\n    return 'array';\n  } else {\n    return typeof victim;\n  }\n}\n\n/**\n * Scramble a variable of any type.\n *\n * @public\n * @param {any} - A variable of any type, unscrambled.\n * @returns {any} - A variable of any type, scrambled.\n */\n\nWordscramble.prototype.scramble = function (victim) {\n  const victimType = type(victim);\n  switch (victimType) {\n    case 'function':\n      return victim;\n    default:\n      return this[victimType](victim);\n  }\n};\n\n/**\n * Scramble a string value by rearranging the order of the characters.\n *\n * This is functionally identical to Wordscramble.number().\n *\n * @public\n * @param {string} string\n * @returns {string} string\n */\n\nWordscramble.prototype.string = function (string) {\n  return this.array(String(string).split('')).join('');\n};\n\n/**\n * Scramble the order of elements in an array.\n *\n * Strings (and numbers cast as strings) are passed to this function to be\n * scrambled.\n *\n * @public\n * @param {array} collection - Unscrambled array.\n * @returns {array} collection - Recursively scrambled array.\n */\n\nWordscramble.prototype.array = function (array) {\n  if (array.length < 2) {\n    return array;\n  }\n  let copy = array.slice(),\n    index = copy.length,\n    rand = random(index),\n    temp;\n  while (--index > 0) {\n    temp = copy[index];\n    copy[index] = copy[rand];\n    copy[rand] = temp;\n    rand = random(index);\n  }\n  return copy.map(this.scramble, this);\n};\n\n/**\n * Scramble a Boolean value by, like, flipping it.\n *\n * @param {boolean} boolean\n * @returns {boolean} boolean\n */\n\nWordscramble.prototype.boolean = function (boolean) {\n  return !boolean;\n};\n\n/**\n * Scramble a numerical value by rearranging the order of the digits.\n *\n * This is functionally identical to Wordscramble.string().\n *\n * @public\n * @param {number} number\n * @returns {number} number\n */\n\nWordscramble.prototype.number = function (number) {\n  return Number(this.string(number));\n};\n\n/**\n * Recursively walk an object in order to scramble all values.\n *\n * @public\n * @param {object} object\n * @returns {object} object\n */\n\nWordscramble.prototype.object = function (object) {\n  let copy = Object.assign({}, object);\n  Object.keys(copy).forEach(key => copy[key] = this.scramble(copy[key]));\n  return copy;\n};\nmodule.exports = Object.create(Wordscramble.prototype);","map":{"version":3,"names":["Wordscramble","random","max","Math","floor","type","victim","Array","isArray","prototype","scramble","victimType","string","array","String","split","join","length","copy","slice","index","rand","temp","map","boolean","number","Number","object","Object","assign","keys","forEach","key","module","exports","create"],"sources":["/Users/brandonkwon/node_modules/wordscramble/wordscramble.js"],"sourcesContent":["'use strict';\n\n/**\n * Random crap scrambler.\n */\n\nconst Wordscramble = function() {};\n\n/**\n * Return a random value up to max.\n *\n * @private\n * @param {number} max - Maximum value.\n * @returns {number} - Random number.\n */\n\nfunction random(max) {\n    return Math.floor(Math.random() * max);\n}\n\n/**\n * Crude variable type detection.\n *\n * TODO: More comprehensive type checking.\n *\n * @private\n * @param {*} victim - Victim to identify.\n * @return {string} - Victim type.\n */\n\nfunction type(victim) {\n    if (Array.isArray(victim)) {\n        return 'array';\n    } else {\n        return typeof victim;\n    }\n}\n\n/**\n * Scramble a variable of any type.\n *\n * @public\n * @param {any} - A variable of any type, unscrambled.\n * @returns {any} - A variable of any type, scrambled.\n */\n\nWordscramble.prototype.scramble = function(victim) {\n    const victimType = type(victim);\n\n    switch (victimType) {\n    case 'function': return victim;\n    default: return this[victimType](victim);\n    }\n};\n\n/**\n * Scramble a string value by rearranging the order of the characters.\n *\n * This is functionally identical to Wordscramble.number().\n *\n * @public\n * @param {string} string\n * @returns {string} string\n */\n\nWordscramble.prototype.string = function(string) {\n    return this.array(String(string).split('')).join('');\n};\n\n/**\n * Scramble the order of elements in an array.\n *\n * Strings (and numbers cast as strings) are passed to this function to be\n * scrambled.\n *\n * @public\n * @param {array} collection - Unscrambled array.\n * @returns {array} collection - Recursively scrambled array.\n */\n\nWordscramble.prototype.array = function(array) {\n    if (array.length < 2) {\n        return array;\n    }\n\n    let copy = array.slice(),\n        index = copy.length,\n        rand = random(index),\n        temp;\n\n    while (--index > 0) {\n        temp = copy[index];\n        copy[index] = copy[rand];\n        copy[rand] = temp;\n        rand = random(index);\n    }\n\n    return copy.map(this.scramble, this);\n};\n\n/**\n * Scramble a Boolean value by, like, flipping it.\n *\n * @param {boolean} boolean\n * @returns {boolean} boolean\n */\n\nWordscramble.prototype.boolean = function(boolean) {\n    return !boolean;\n};\n\n/**\n * Scramble a numerical value by rearranging the order of the digits.\n *\n * This is functionally identical to Wordscramble.string().\n *\n * @public\n * @param {number} number\n * @returns {number} number\n */\n\nWordscramble.prototype.number = function(number) {\n    return Number(this.string(number));\n};\n\n/**\n * Recursively walk an object in order to scramble all values.\n *\n * @public\n * @param {object} object\n * @returns {object} object\n */\n\nWordscramble.prototype.object = function(object) {\n    let copy = Object.assign({}, object);\n    Object.keys(copy).forEach(key => copy[key] = this.scramble(copy[key]));\n    return copy;\n};\n\nmodule.exports = Object.create(Wordscramble.prototype);\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}